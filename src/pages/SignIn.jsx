import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom"; // Added useNavigate
import { GoogleLogin } from "@react-oauth/google"; //
import { jwtDecode } from "jwt-decode"; //
import "./signin.css"; //

const API_BASE_URL = "http://localhost:8000"; // Or your backend URL

const SignIn = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [rememberMe, setRememberMe] = useState(false);
  const navigate = useNavigate(); // For redirection

  const handleEmailPasswordSignIn = async (e) => {
    e.preventDefault();
    setError("");

    if (!email || !password) {
      setError("Email and password are required.");
      return;
    }

    try {
      const formData = new URLSearchParams();
      formData.append('username', email); // 'username' is used for email here
      formData.append('password', password);

      const response = await fetch(`${API_BASE_URL}/auth/login`, { // Fixed template literal
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
        body: formData.toString(),
      });

      const data = await response.json();

      if (!response.ok) {
        setError(data.detail || "Sign in failed. Please check your credentials.");
      } else {
        console.log("Email/Password Sign In Success:", data);
        localStorage.setItem('authToken', data.access_token);
        localStorage.setItem('user', JSON.stringify({ 
            email: data.email,
            userId: data.user_id,
            isGoogleUser: false 
        }));
        navigate("/generate"); // ðŸ”„ REDIRECT TO GeneratePPT
      }
    } catch (err) {
      console.error("Sign in error:", err);
      setError("An unexpected error occurred. Please try again later.");
    }
  };

  const handleGoogleSuccess = async (credentialResponse) => {
    setError(""); // Clear previous errors
    console.log("Google credential received from Google:", credentialResponse);

    try {
        // Send the Google token to your backend for verification and session creation
        const response = await fetch(`${API_BASE_URL}/auth/google-login`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ token: credentialResponse.credential }),
        });

        const data = await response.json();

        if (!response.ok) {
            setError(data.detail || "Google Sign-In failed on the server. Please try again.");
        } else {
            // IMPORTANT: Store the access token generated by YOUR backend
            console.log("Backend Sign In Success (via Google):", data);
            localStorage.setItem('authToken', data.access_token);
            
            // Decode the original google token just to get user's name and picture for local storage
            const decodedGoogleToken = jwtDecode(credentialResponse.credential);
            
            localStorage.setItem('user', JSON.stringify({
                email: data.email, // Use email from your backend's response
                userId: data.user_id, // Use userId from your backend's response
                name: decodedGoogleToken.name,
                picture: decodedGoogleToken.picture,
                isGoogleUser: true
            }));

            navigate('/generate'); // ðŸ”„ REDIRECT TO GeneratePPT
        }
    } catch (err) {
        console.error("Google Sign-In error:", err);
        setError("An unexpected network error occurred during Google Sign-In.");
    }
  };

  return (
    <div className="signin-container">
      <div className="signin-left">
        <h2>Welcome Back</h2>
        <h2>Please sign in</h2>
        <p>
          Don't have an account? <Link to="/signup">Sign up</Link>
        </p>

        <div className="google-signin">
          <GoogleLogin
            onSuccess={handleGoogleSuccess}
            onError={() => {
              console.log("Google Login Failed");
              setError("Google Sign In failed. Please try again or use email/password.");
            }}
          />
        </div>

        <p className="or">or</p>

        {error && <p className="error-message" style={{color: 'red', textAlign: 'center'}}>{error}</p>}

        <form onSubmit={handleEmailPasswordSignIn}>
          <input 
            type="email" 
            placeholder="Enter your email" 
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
          <input 
            type="password" 
            placeholder="Password" 
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />

          <div className="terms">
            <input 
              type="checkbox" 
              id="remember" 
              checked={rememberMe}
              onChange={(e) => setRememberMe(e.target.checked)}
            />
            <label htmlFor="remember">Remember me</label>
          </div>

          <button type="submit" className="continue-btn">Sign In</button>
        </form>

        <p className="forgot-password">
          <Link to="/forgot-password">Forgot password?</Link>
        </p>
      </div>

      <div className="signin-right">
        <h2>Welcome Back to DocuApp!</h2>
        <ul>
          <li>ðŸ”’ Secure Cloud Storage</li>
          <li>ðŸ“„ AI-powered Document Management</li>
          <li>ðŸš€ Fast and Easy Access</li>
        </ul>
      </div>
    </div>
  );
};

export default SignIn;